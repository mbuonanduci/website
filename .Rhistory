covariate <- rnorm(100,0,20)
linpred <- 0.2 * covariate
response <- exp(linpred) / (exp(linpred)+1) + rnorm(100,0,0.1)
response <- round(response,2)
data <- data.frame("y"=response, "x"=covariate)
data <- data[data$y>=0 & data$y<=1,]
# add some extra zeros for fun
data <- rbind(data, data.frame("y"=rep(0,50),"x"=rnorm(50,-15,10)))
#######################################
# try out gamlss
require(gamlss)
# need to specify nu and tau as functions of covariates, not just mu
model1 <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=data, family=BEINF())
summary(model1)
# this formulation says only mu is a function of covariates, so it gives single point
# estimates for nu and tau
model2 <- gamlss(y ~ x, data=data, family=BEINF())
summary(model2)
# extract predictions for parameters
# you can try changing 'model1' in this line to 'model2' to see how plot below changes
pred <- predictAll(model1, type="response")
# convert nu and tau to p0 and p1
# see page 14 of the following for reparameterization
# https://www.gamlss.com/wp-content/uploads/2018/01/InflatedDistributioninR.pdf
mu <- pred$mu
nu <- pred$nu
tau <- pred$tau
p0 <- nu / (1+nu+tau) # probability of zeros
p1 <- tau / (1+nu+tau) # probability of ones
# overall expectation for y can be calculated as follows:
# see https://www3.nd.edu/~fliu2/Rjournal_zoib.pdf
expect <- (1-p0)*(p1+(1-p1)*mu)
plot(data$x, data$y)
points(data$x, mu, pch=16, col="blue") # probability for proportions
points(data$x, p0, pch=16, col="green") # probability for zeros
points(data$x, p1, pch=16, col="red") # probability for ones
points(data$x, expect, pch=16, col="gray") # overall expectation for y
# simulate data
rbinom(length(p0), 1, p0)
# simulate data
sim0 <- rbinom(length(p0), 1, p0)
plot(sim0, data$x)
plot(data$x, sim0)
sim1 <- rbinom(length(p1), 1, p1)
plot(data$x, sim1)
pred
?rBEINF
sigma <- pred$sigma
# simulate data
sim <- (n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
# simulate data
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(dat$x, sim)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
?update
df <- data.frame("y"=sim, "x"=data$x)
View(df)
View(data)
View(df)
#Get Prediction CIs and Plot
newData <- data.frame(x = seq(-30,30,0.1))
boots <- 10000
yest <- matrix(NA,nrow=length(newData$x),ncol=boots)
#Get Prediction CIs and Plot
new_data <- data.frame(x = seq(-30,30,0.1))
boots <- 10000
yest <- matrix(NA,nrow=length(newData$x),ncol=boots)
new_data <- data.frame(x = data$x)
boots <- 10000
yest <- matrix(NA,nrow=length(newData$x),ncol=boots)
for(i in 1:boots){
new_data$y <- rBEINF(n=length(mu), mu=mu, sigma=sigma, nu=nu, tau=tau) # simulate from the model
ymod <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=new_data, family=BEINF()) # re-fit the model using simulated data
new_pred <- predictAll(ymod, type="response") # extract new predictions from re-fitted model
new_mu <- new_pred$mu
new_nu <- new_pred$nu
new_tau <- new_pred$tau
new_p0 <- new_nu / (1+new_nu+new_tau) # probability of zeros
new_p1 <- new_tau / (1+new_nu+new_tau) # probability of ones
yest[,i] <- (1-new_p0)*(new_p1+(1-new_p1)*new_mu) # expected value for new predictions
}
(1-new_p0)*(new_p1+(1-new_p1)*new_mu)
length(newData$x)
#Get Prediction CIs and Plot
new_data <- data.frame(x = data$x)
boots <- 10000
yest <- matrix(NA,nrow=length(newData$x),ncol=boots)
for(i in 1:boots){
new_data$y <- rBEINF(n=length(mu), mu=mu, sigma=sigma, nu=nu, tau=tau) # simulate from the model
ymod <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=new_data, family=BEINF()) # re-fit the model using simulated data
new_pred <- predictAll(ymod, type="response") # extract new predictions from re-fitted model
new_mu <- new_pred$mu
new_nu <- new_pred$nu
new_tau <- new_pred$tau
new_p0 <- new_nu / (1+new_nu+new_tau) # probability of zeros
new_p1 <- new_tau / (1+new_nu+new_tau) # probability of ones
yest[,i] <- (1-new_p0)*(new_p1+(1-new_p1)*new_mu) # expected value for new predictions
}
yest[,i]
dim(yest)
yest <- matrix(NA,nrow=length(newData$x),ncol=boots)
dim(yest)
length(newData$x)
#Get Prediction CIs and Plot
new_data <- data.frame(x = data$x)
boots <- 10000
yest <- matrix(NA,nrow=length(new_data$x),ncol=boots)
for(i in 1:boots){
new_data$y <- rBEINF(n=length(mu), mu=mu, sigma=sigma, nu=nu, tau=tau) # simulate from the model
ymod <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=new_data, family=BEINF()) # re-fit the model using simulated data
new_pred <- predictAll(ymod, type="response") # extract new predictions from re-fitted model
new_mu <- new_pred$mu
new_nu <- new_pred$nu
new_tau <- new_pred$tau
new_p0 <- new_nu / (1+new_nu+new_tau) # probability of zeros
new_p1 <- new_tau / (1+new_nu+new_tau) # probability of ones
yest[,i] <- (1-new_p0)*(new_p1+(1-new_p1)*new_mu) # expected value for new predictions
}
#Get Prediction CIs and Plot
new_data <- data.frame(x = data$x)
boots <- 1000
yest <- matrix(NA,nrow=length(new_data$x),ncol=boots)
for(i in 1:boots){
new_data$y <- rBEINF(n=length(mu), mu=mu, sigma=sigma, nu=nu, tau=tau) # simulate from the model
ymod <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=new_data, family=BEINF()) # re-fit the model using simulated data
new_pred <- predictAll(ymod, type="response") # extract new predictions from re-fitted model
new_mu <- new_pred$mu
new_nu <- new_pred$nu
new_tau <- new_pred$tau
new_p0 <- new_nu / (1+new_nu+new_tau) # probability of zeros
new_p1 <- new_tau / (1+new_nu+new_tau) # probability of ones
yest[,i] <- (1-new_p0)*(new_p1+(1-new_p1)*new_mu) # expected value for new predictions
}
summ.best <- matrix(NA,nrow=length(new_data$x),ncol=3)
for(i in 1:202){
summ.best[i,1] <- mean(yest[i,])
summ.best[i,2] <- quantile(yest[i,],probs=0.025)
summ.best[i,3] <- quantile(yest[i,],probs=0.975)
}
summ.best <- matrix(NA,nrow=length(new_data$x),ncol=3)
for(i in 1:length(new_data$x)){
summ.best[i,1] <- mean(yest[i,])
summ.best[i,2] <- quantile(yest[i,],probs=0.025)
summ.best[i,3] <- quantile(yest[i,],probs=0.975)
}
plot(data$x, data$y)
plot(data$x, summ.best[,1], pch=16, col="gray")
plot(data$x, data$y)
points(data$x, summ.best[,1], pch=16, col="gray")
points(data$x, summ.best[,2], pch=16, col="blue") # lower bound
points(data$x, summ.best[,2], pch=16, col="red") # upper bound
plot(data$x, data$y)
points(data$x, summ.best[,1], pch=16, col="gray") # mean
points(data$x, summ.best[,2], pch=16, col="blue") # lower bound
points(data$x, summ.best[,3], pch=16, col="red") # upper bound
predictAll()
?predictAll
new_data <- data.frame(x = seq(from=-30, to=30, by=0.1))
predictAll(model1, newdata=new_data, type="response")
View(new_data)
predictAll(model1, newdata=new_data, type="response")
View(new_data)
View(data)
predictAll(object=model1, newdata=new_data, type="response")
predictAll(object=model1, newdata=new_data$x, type="response")
predictAll(object=model1, newdata=data.frame(new_data$x), type="response")
?`namedList-class`
data("aids")
a<-gamlss(y~poly(x,3)+qrt, family=PO, data=aids)
newaids<-data.frame(x=c(45,46,47), qrt=c(2,3,4))
ap <- predict(a, newdata=newaids, type = "response")
new_data <- data.frame(x = seq(from=-30, to=30, by=0.5))
predictAll(model1, newdata=new_data, type="response")
#######################################
# simulate some data
# this is a mess because I was just screwing around
set.seed(123)
covariate <- rnorm(100,0,20)
linpred <- 0.2 * covariate
response <- exp(linpred) / (exp(linpred)+1) + rnorm(100,0,0.1)
response <- round(response,2)
data <- data.frame("y"=response, "x"=covariate)
data <- data[data$y>=0 & data$y<=1,]
# add some extra zeros for fun
data <- rbind(data, data.frame("y"=rep(0,50),"x"=rnorm(50,-15,10)))
#######################################
# try out gamlss
require(gamlss)
# need to specify nu and tau as functions of covariates, not just mu
model1 <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=data, family=BEINF())
summary(model1)
# this formulation says only mu is a function of covariates, so it gives single point
# estimates for nu and tau
model2 <- gamlss(y ~ x, data=data, family=BEINF())
summary(model2)
# extract predictions for parameters
# you can try changing 'model1' in this line to 'model2' to see how plot below changes
pred <- predictAll(model1, type="response")
# convert nu and tau to p0 and p1
# see page 14 of the following for reparameterization
# https://www.gamlss.com/wp-content/uploads/2018/01/InflatedDistributioninR.pdf
mu <- pred$mu
sigma <- pred$sigma
nu <- pred$nu
tau <- pred$tau
p0 <- nu / (1+nu+tau) # probability of zeros
p1 <- tau / (1+nu+tau) # probability of ones
# overall expectation for y can be calculated as follows:
# see https://www3.nd.edu/~fliu2/Rjournal_zoib.pdf
expect <- (1-p0)*(p1+(1-p1)*mu)
plot(data$x, data$y)
points(data$x, mu, pch=16, col="blue") # probability for proportions
points(data$x, p0, pch=16, col="green") # probability for zeros
points(data$x, p1, pch=16, col="red") # probability for ones
points(data$x, expect, pch=16, col="gray") # overall expectation for y
# simulate data
sim <- rBEINF(n = length(mu), mu = mu, sigma = sigma, nu = nu, tau = tau)
plot(data$x, sim)
new_data <- data.frame(x = seq(from=-30, to=30, by=0.5))
predictAll(model1, newdata=new_data, type="response")
predict(model1, newdata=new_data, type="response")
predictAll(model1, newdata=new_data, data=data, type="response")
# need to specify nu and tau as functions of covariates, not just mu
model1 <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=data, family=BEINF())
summary(model1)
#Get Prediction CIs and Plot
new_data <- data.frame(x = seq(from=-30, to=30, by=0.5)) # customize this range to suit your data
pred <- predictAll(model1, newdata=new_data, data=data, type="response")
mu <- pred$mu
sigma <- pred$sigma
nu <- pred$nu
tau <- pred$tau
p0 <- nu / (1+nu+tau) # probability of zeros
p1 <- tau / (1+nu+tau) # probability of ones
boots <- 1000
yest <- matrix(NA,nrow=length(new_data$x),ncol=boots)
for(i in 1:boots){
new_data$y <- rBEINF(n=length(mu), mu=mu, sigma=sigma, nu=nu, tau=tau) # simulate from the model
ymod <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=new_data, family=BEINF()) # re-fit the model using simulated data
new_pred <- predictAll(ymod, type="response") # extract new predictions from re-fitted model
new_mu <- new_pred$mu
new_nu <- new_pred$nu
new_tau <- new_pred$tau
new_p0 <- new_nu / (1+new_nu+new_tau) # probability of zeros
new_p1 <- new_tau / (1+new_nu+new_tau) # probability of ones
yest[,i] <- (1-new_p0)*(new_p1+(1-new_p1)*new_mu) # expected value for new predictions
}
summ.best <- matrix(NA,nrow=length(new_data$x),ncol=3)
for(i in 1:length(new_data$x)){
summ.best[i,1] <- mean(yest[i,])
summ.best[i,2] <- quantile(yest[i,],probs=0.025)
summ.best[i,3] <- quantile(yest[i,],probs=0.975)
}
plot(data$x, data$y)
points(data$x, summ.best[,1], pch=16, col="gray") # mean
points(data$x, summ.best[,2], pch=16, col="blue") # lower bound
points(data$x, summ.best[,3], pch=16, col="red") # upper bound
plot(data$x, data$y)
points(new_data$x, summ.best[,1], pch=16, col="gray") # mean
points(new_data$x, summ.best[,2], pch=16, col="blue") # lower bound
points(new_data$x, summ.best[,3], pch=16, col="red") # upper bound
# Get Prediction CIs and Plot
new_data <- data.frame(x = seq(from=-40, to=40, by=0.2)) # customize this range to suit your data
pred <- predictAll(model1, newdata=new_data, data=data, type="response")
mu <- pred$mu
sigma <- pred$sigma
nu <- pred$nu
tau <- pred$tau
p0 <- nu / (1+nu+tau) # probability of zeros
p1 <- tau / (1+nu+tau) # probability of ones
boots <- 1000
yest <- matrix(NA,nrow=length(new_data$x),ncol=boots)
for(i in 1:boots){
new_data$y <- rBEINF(n=length(mu), mu=mu, sigma=sigma, nu=nu, tau=tau) # simulate from the model
ymod <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=new_data, family=BEINF()) # re-fit the model using simulated data
new_pred <- predictAll(ymod, type="response") # extract new predictions from re-fitted model
new_mu <- new_pred$mu
new_nu <- new_pred$nu
new_tau <- new_pred$tau
new_p0 <- new_nu / (1+new_nu+new_tau) # probability of zeros
new_p1 <- new_tau / (1+new_nu+new_tau) # probability of ones
yest[,i] <- (1-new_p0)*(new_p1+(1-new_p1)*new_mu) # expected value for new predictions
}
summ.best <- matrix(NA,nrow=length(new_data$x),ncol=3)
for(i in 1:length(new_data$x)){
summ.best[i,1] <- mean(yest[i,])
summ.best[i,2] <- quantile(yest[i,],probs=0.025)
summ.best[i,3] <- quantile(yest[i,],probs=0.975)
}
rgb(t(col2rgb(c("steelblue4","gray","salmon3"))),
maxColorValue=255)
plot(data$x, data$y, pch=16, col="forestgreen")
points(new_data$x, summ.best[,1], pch=16, type="l", col="gray") # mean
polygon(x=c(new_data$x, rev(new_data$x)),
y=c(summ.best[,2], rev(summ.best[,3])),
col="#BEBEBE50")
plot(data$x, data$y, pch=16, col="forestgreen")
points(new_data$x, summ.best[,1], pch=16, type="l", col="gray20") # mean
polygon(x=c(new_data$x, rev(new_data$x)),
y=c(summ.best[,2], rev(summ.best[,3])),
col="#BEBEBE50", bg=NA)
?polygon
plot(data$x, data$y, pch=16, col="forestgreen")
points(new_data$x, summ.best[,1], pch=16, type="l", col="gray20") # mean
polygon(x=c(new_data$x, rev(new_data$x)),
y=c(summ.best[,2], rev(summ.best[,3])),
col="#BEBEBE20", border=NULL)
plot(data$x, data$y, pch=16, col="forestgreen")
points(new_data$x, summ.best[,1], pch=16, type="l", col="gray20") # mean
polygon(x=c(new_data$x, rev(new_data$x)),
y=c(summ.best[,2], rev(summ.best[,3])),
col="#BEBEBE20", border=NA)
plot(data$x, data$y, pch=16, col="forestgreen")
points(new_data$x, summ.best[,1], pch=16, type="l", col="gray20") # mean
polygon(x=c(new_data$x, rev(new_data$x)),
y=c(summ.best[,2], rev(summ.best[,3])),
col="#BEBEBE80", border=NA)
plot(data$x, data$y, pch=16, col="forestgreen")
points(new_data$x, summ.best[,1], pch=16, type="l", col="gray80") # mean
polygon(x=c(new_data$x, rev(new_data$x)),
y=c(summ.best[,2], rev(summ.best[,3])),
col="#BEBEBE80", border=NA)
plot(data$x, data$y, pch=16, col="forestgreen")
points(new_data$x, summ.best[,1], pch=16, type="l", lwd=2, col="gray20") # mean
polygon(x=c(new_data$x, rev(new_data$x)),
y=c(summ.best[,2], rev(summ.best[,3])),
col="#BEBEBE80", border=NA)
#######################################
# simulate some data
# this is a mess because I was just screwing around
set.seed(123)
covariate <- rnorm(100,0,20)
linpred <- 0.2 * covariate
response <- exp(linpred) / (exp(linpred)+1) + rnorm(100,0,0.1)
response <- round(response,2)
data <- data.frame("y"=response, "x"=covariate)
data <- data[data$y>=0 & data$y<=1,]
# add some extra zeros for fun
data <- rbind(data, data.frame("y"=rep(0,50),"x"=rnorm(50,-15,10)))
#######################################
# try out gamlss
require(gamlss)
# need to specify nu and tau as functions of covariates, not just mu
model1 <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=data, family=BEINF())
summary(model1)
# Get Prediction CIs and Plot
new_data <- data.frame(x = seq(from=-40, to=40, by=0.2)) # customize this range to suit your data
pred <- predictAll(model1, newdata=new_data, data=data, type="response")
mu <- pred$mu
sigma <- pred$sigma
nu <- pred$nu
tau <- pred$tau
p0 <- nu / (1+nu+tau) # probability of zeros
p1 <- tau / (1+nu+tau) # probability of ones
boots <- 5000
yest <- matrix(NA,nrow=length(new_data$x),ncol=boots)
for(i in 1:boots){
new_data$y <- rBEINF(n=length(mu), mu=mu, sigma=sigma, nu=nu, tau=tau) # simulate from the model
ymod <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=new_data, family=BEINF()) # re-fit the model using simulated data
new_pred <- predictAll(ymod, type="response") # extract new predictions from re-fitted model
new_mu <- new_pred$mu
new_nu <- new_pred$nu
new_tau <- new_pred$tau
new_p0 <- new_nu / (1+new_nu+new_tau) # probability of zeros
new_p1 <- new_tau / (1+new_nu+new_tau) # probability of ones
yest[,i] <- (1-new_p0)*(new_p1+(1-new_p1)*new_mu) # expected value for new predictions
}
summ.best <- matrix(NA,nrow=length(new_data$x),ncol=3)
for(i in 1:length(new_data$x)){
summ.best[i,1] <- mean(yest[i,])
summ.best[i,2] <- quantile(yest[i,],probs=0.025) # lower bound
summ.best[i,3] <- quantile(yest[i,],probs=0.975) # upper bound
}
plot(data$x, data$y, pch=16, col="forestgreen")
points(new_data$x, summ.best[,1], pch=16, type="l", lwd=2, col="gray20") # mean
polygon(x=c(new_data$x, rev(new_data$x)),
y=c(summ.best[,2], rev(summ.best[,3])),
col="#BEBEBE80", border=NA)
?update
# bootstrap predictions
# warning! may take a while
for(i in 1:boots){
new_data$y <- rBEINF(n=length(mu), mu=mu, sigma=sigma, nu=nu, tau=tau)
ymod <- gamlss(y~x, nu.formula = ~x, tau.formula = ~x,  data=new_data, family=BEINF()) # re-fit the model using simulated data
new_pred <- predictAll(ymod, type="response") # extract new predictions from re-fitted model
new_mu <- new_pred$mu
new_nu <- new_pred$nu
new_tau <- new_pred$tau
new_p0 <- new_nu / (1+new_nu+new_tau) # probability of zeros
new_p1 <- new_tau / (1+new_nu+new_tau) # probability of ones
yest[,i] <- (1-new_p0)*(new_p1+(1-new_p1)*new_mu) # calculate expected value for new predictions
}
plot(data$x, data$y, pch=16, col="forestgreen")
points(new_data$x, summ.best[,1], pch=16, type="l", lwd=2, col="gray20") # mean
polygon(x=c(new_data$x, rev(new_data$x)),
y=c(summ.best[,2], rev(summ.best[,3])),
col="#BEBEBE80", border=NA)
plot(data$x, data$y, pch=16, col="forestgreen")
points(new_data$x, summ.best[,1], pch=16, type="l", lwd=2, col="gray20") # mean
polygon(x=c(new_data$x, rev(new_data$x)),
y=c(summ.best[,2], rev(summ.best[,3])),
col="#BEBEBE90", border=NA)
install.packages("rmarkdown","bookdown","xaringan","pkgdown")
install.packages("rmarkdown","xaringan","pkgdown")
install.packages("huskydown")
if (!require("devtools")) install.packages("devtools", repos = "http://cran.rstudio.org")
devtools::install_github("rstudio/bookdown")
require(huskydown)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
install.packages(rticles)
install.packages("rticles")
x <- pi
x
signif(x, 1)
signif(x, 5)
x <- pi/100000000
x
install.packages("texreg")
install.packages("xtable")
mtcars
library(xtable)
library(texreg)
library(ggplot2)
xtable(mtcars)
library(xtable)
library(ggplot2)
library(texreg)
?xtable
praise
install.packages("praise")
praise
praise()
require(praise)
praise
praise()
praise()
praise()
praise()
praise()
praise()
praise()
install.packages("tidymodels")
install.packages("caret")
install.packages("AppliedPredictiveModeling")
require(tidyverse)
require(lubridate)
require(gapminder)
gapminder
gapminder <- group_by(gapminder, country)
gapminder
gapminder <- ungroup(gapminder)
gapminder
?ungroup
setwd("~/Documents/website")
library(blogdown)
new_site(theme = "gcushen/hugo-academic", sample = TRUE, theme_example = TRUE, empty_dirs = TRUE, to_yaml = TRUE)
wd()
library(blogdown)
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
serve_site()
build_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
build_site()
library(blogdown)
serve_site()
library(blogdown)
build_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
build_site()
library(blogdown)
serve_site()
servr::daemon_stop(1)
build_site()
